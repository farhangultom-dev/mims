package dev.iconpln.mims.data.local.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAGOMATERIAL_DATA".
*/
public class TAGOMaterialDataDao extends AbstractDao<TAGOMaterialData, Long> {

    public static final String TABLENAME = "TAGOMATERIAL_DATA";

    /**
     * Properties of entity TAGOMaterialData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NoMaterial = new Property(1, String.class, "noMaterial", false, "NO_MATERIAL");
        public final static Property NamaMaterial = new Property(2, String.class, "namaMaterial", false, "NAMA_MATERIAL");
        public final static Property QtyMaterial = new Property(3, String.class, "qtyMaterial", false, "QTY_MATERIAL");
        public final static Property UnitMaterial = new Property(4, String.class, "unitMaterial", false, "UNIT_MATERIAL");
        public final static Property SnMaterial = new Property(5, String.class, "snMaterial", false, "SN_MATERIAL");
        public final static Property InspectionNumber = new Property(6, String.class, "inspectionNumber", false, "INSPECTION_NUMBER");
    }


    public TAGOMaterialDataDao(DaoConfig config) {
        super(config);
    }
    
    public TAGOMaterialDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAGOMATERIAL_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NO_MATERIAL\" TEXT," + // 1: noMaterial
                "\"NAMA_MATERIAL\" TEXT," + // 2: namaMaterial
                "\"QTY_MATERIAL\" TEXT," + // 3: qtyMaterial
                "\"UNIT_MATERIAL\" TEXT," + // 4: unitMaterial
                "\"SN_MATERIAL\" TEXT," + // 5: snMaterial
                "\"INSPECTION_NUMBER\" TEXT);"); // 6: inspectionNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAGOMATERIAL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TAGOMaterialData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String noMaterial = entity.getNoMaterial();
        if (noMaterial != null) {
            stmt.bindString(2, noMaterial);
        }
 
        String namaMaterial = entity.getNamaMaterial();
        if (namaMaterial != null) {
            stmt.bindString(3, namaMaterial);
        }
 
        String qtyMaterial = entity.getQtyMaterial();
        if (qtyMaterial != null) {
            stmt.bindString(4, qtyMaterial);
        }
 
        String unitMaterial = entity.getUnitMaterial();
        if (unitMaterial != null) {
            stmt.bindString(5, unitMaterial);
        }
 
        String snMaterial = entity.getSnMaterial();
        if (snMaterial != null) {
            stmt.bindString(6, snMaterial);
        }
 
        String inspectionNumber = entity.getInspectionNumber();
        if (inspectionNumber != null) {
            stmt.bindString(7, inspectionNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TAGOMaterialData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String noMaterial = entity.getNoMaterial();
        if (noMaterial != null) {
            stmt.bindString(2, noMaterial);
        }
 
        String namaMaterial = entity.getNamaMaterial();
        if (namaMaterial != null) {
            stmt.bindString(3, namaMaterial);
        }
 
        String qtyMaterial = entity.getQtyMaterial();
        if (qtyMaterial != null) {
            stmt.bindString(4, qtyMaterial);
        }
 
        String unitMaterial = entity.getUnitMaterial();
        if (unitMaterial != null) {
            stmt.bindString(5, unitMaterial);
        }
 
        String snMaterial = entity.getSnMaterial();
        if (snMaterial != null) {
            stmt.bindString(6, snMaterial);
        }
 
        String inspectionNumber = entity.getInspectionNumber();
        if (inspectionNumber != null) {
            stmt.bindString(7, inspectionNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TAGOMaterialData readEntity(Cursor cursor, int offset) {
        TAGOMaterialData entity = new TAGOMaterialData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // noMaterial
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // namaMaterial
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // qtyMaterial
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unitMaterial
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // snMaterial
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // inspectionNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TAGOMaterialData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoMaterial(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNamaMaterial(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQtyMaterial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitMaterial(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSnMaterial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInspectionNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TAGOMaterialData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TAGOMaterialData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TAGOMaterialData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
